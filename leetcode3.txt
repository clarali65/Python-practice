给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false
示例 4:

输入: "([)]"
输出: false
示例 5:

输入: "{[]}"
输出: true

解法一：
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        validstack=["?"]
        dic={'(':')','[':']','{':'}','?':'?'}
        for i in s:
            if i in dic:
                validstack.append(i)
            elif dic[validstack.pop()] != i:
                return False
        return len(validstack)==1

利用栈的特性，对于边界情况，因为如果只是单独的右括号输入会产生无法pop从而出错的情况，所以在stack中添加了一个元素从而使stack能够pop出元素

解法二：（LeetCode上看到的解法）
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        while '()' in s or '[]' in s or '{}' in s:
            s=s.replace('()','')
            s=s.replace('[]','')
            s=s.replace('{}','')
        return s==''



21. 合并两个有序链表

将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4


解：（自己的解法）迭代法：直接创建新的链表并逐一比较两个链表中每个元素的大小，依次放入链表

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy=l3=ListNode(0)
        while l1 and l2:
            if l1.val<l2.val:
                l3.next=l1
                l1=l1.next
            else:
                l3.next=l2
                l2=l2.next
            l3=l3.next
        l3.next=l1 or l2
        return dummy.next

解法二：递归方法
merge操作：当list1[0]<list2[0]-----list1[0]+merge(list1[1:],list2)
当list1[0]>=list2[0]-----list2[0]+merge(list2[1:],list1)

边界情况：当l1或l2一开始就是null，那么只需要返回另一个非空的链表，如果两个都是空的，程序终止

# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if l1 is None:
            return l2
        elif l2 is None:
            return l1
        elif l1.val<l2.val:
            l1.next=self.mergeTwoLists(l1.next,l2)
            return l1
        else:
            l2.next=self.mergeTwoLists(l1,l2.next)
            return l2


53.最大子序和

给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

解法一：暴力解法，遍历所有的子数组计算出最大值（超时）
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        lens=len(nums)
        maxsums=nums[0]        
        for i in range(lens):
            sums=0
            for j in range(i,lens):
                sums=sums+nums[j]
                maxsums=max(maxsums,sums)
        return maxsums

解法二：改进解法一，贪心法，少比较一轮循环
每次都算出当前情况下最大的和，最后得到答案
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        lens=len(nums)
        maxsums=sums=nums[0]        
        for i in range(1,lens):
            sums=max(nums[i],sums+nums[i])
            maxsums=max(maxsums,sums)
        return maxsums

解法二：动态规划

首先对数组进行遍历，当前最大连续子序列和为sum，结果为maxsums
当sums>0时，表示这段子数组对最后的结果有贡献，可以保留，并加上当前遍历数字
当sums<0=时，说明sums对结果没有增益效果，那么就将sums设为当前读入的这个元素大小
每次比较sums和maxsums的值，确认每轮的最大值，直到得到结果并返回

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        lens=len(nums)
        maxsums=sums=nums[0]
        for i in range(1,lens):
            if sums>0:
                sums=sums+nums[i]
            else:
                sums=nums[i]
            maxsums=max(maxsums,sums)
        return maxsums