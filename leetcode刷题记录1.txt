1、Two Sums
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]


Solution1:

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """

        for i in range(len(nums) - 1):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j]==target:
                    return [i,j]
    print("There are no two matching numbers.")




Solution2:

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """

        hashmap=[]
        for i in range(len(nums)):
            num2 = target - nums[i]
            if num2 in hashmap:
                return [hashmap.index(num2),i]
            else:
                hashmap.append(nums[i])
    print("There are no two matching numbers.")




2、两数相加
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807


# Definition for singly-linked list.
# 默认使用a节点，如果a节点为空，就用b节点。相当于用l1,l2链表的原内存空间构成目标内内存，优先使用l1链表的空间
class ListNode(object):
     def __init__(self, x):
         self.val = x
         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        a,b,val,carry=l1,l2,None,0
        while(a or b):
            val=(a.val if a else 0)+(b.val if b else 0)+carry
            carry=val/10
            val=val%10
            p=a if a else b
            p.val=val
            a=a.next if a else None
            b=b.next if b else None       
            p.next=a if a else b
        if carry:
            p.next=ListNode(carry)
        return l1




3、无重复字符的最长字串
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。


class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        left=0
        lookup=set()
        n=len(s)
        maxlength=0
        current=0
        for i in range(n):
            current=current+1
            while s[i] in lookup:
                lookup.remove(s[left])
                left=left+1
                current=current-1
            maxlength=max(current,maxlength)
            lookup.add(s[i])
        return maxlength